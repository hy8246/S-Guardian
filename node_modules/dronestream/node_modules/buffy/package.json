{
  "_args": [
    [
      {
        "raw": "buffy@0.0.5",
        "scope": null,
        "escapedName": "buffy",
        "name": "buffy",
        "rawSpec": "0.0.5",
        "spec": "0.0.5",
        "type": "version"
      },
      "/Users/haopan/node_modules/ar-drone/examples/ardrone-webflight/node_modules/dronestream"
    ]
  ],
  "_from": "buffy@0.0.5",
  "_id": "buffy@0.0.5",
  "_inCache": true,
  "_location": "/dronestream/buffy",
  "_npmUser": {
    "name": "bkw",
    "email": "bkw@codingforce.com"
  },
  "_npmVersion": "1.1.64",
  "_phantomChildren": {},
  "_requested": {
    "raw": "buffy@0.0.5",
    "scope": null,
    "escapedName": "buffy",
    "name": "buffy",
    "rawSpec": "0.0.5",
    "spec": "0.0.5",
    "type": "version"
  },
  "_requiredBy": [
    "/dronestream"
  ],
  "_resolved": "https://registry.npmjs.org/buffy/-/buffy-0.0.5.tgz",
  "_shasum": "ef5e22c96cd51d47c9d5c4300672cce59b2db71b",
  "_shrinkwrap": null,
  "_spec": "buffy@0.0.5",
  "_where": "/Users/haopan/node_modules/ar-drone/examples/ardrone-webflight/node_modules/dronestream",
  "author": {
    "name": "Felix GeisendÃ¶rfer",
    "email": "felix@debuggable.com",
    "url": "http://debuggable.com/"
  },
  "bugs": {
    "url": "https://github.com/felixge/node-buffy/issues"
  },
  "contributors": [
    {
      "name": "Bernhard K. Weisshuhn",
      "email": "bkw@codingforce.com"
    }
  ],
  "dependencies": {},
  "description": "A module to read / write binary data and streams.",
  "devDependencies": {
    "stream-spec": "~0.3.1",
    "stream-tester": "0.0.3",
    "urun": "0.0.6",
    "utest": "0.0.6"
  },
  "directories": {},
  "dist": {
    "shasum": "ef5e22c96cd51d47c9d5c4300672cce59b2db71b",
    "tarball": "https://registry.npmjs.org/buffy/-/buffy-0.0.5.tgz"
  },
  "engines": {
    "node": "*"
  },
  "homepage": "https://github.com/felixge/node-buffy",
  "main": "./index",
  "maintainers": [
    {
      "name": "felixge",
      "email": "felix@debuggable.com"
    },
    {
      "name": "bkw",
      "email": "bkw@codingforce.com"
    }
  ],
  "name": "buffy",
  "optionalDependencies": {},
  "readme": "# buffy (The Buffer Slayer)\n\nA module to read / write binary data and streams.\n\n## Install\n\n```bash\nnpm install buffy\n```\n\n## Usage\n\nLet's say you want to parse a simple C struct, buffy can help:\n\n```js\nvar buffy = require('buffy');\n\nvar buffer = new Buffer([23, 0, 0, 0, 15, 116, 101, 115, 116]);\nvar reader = buffy.createReader(buffer);\n\nvar record = {\n  version : reader.uint8(),\n  id      : reader.uint32(),\n  name    : reader.ascii(4),\n};\n\n// {version: 23, id: 15, name: 'test'}\n```\n\nParsing a buffer is nice, but what about streams? Well, buffy has your back:\n\n```js\nvar buffy      = require('buffy');\nvar net        = require('net');\nvar connection = net.createConnection(1337, 'example.org');\n\nvar reader = buffy.createReader();\nconnection.pipe(reader);\n\nreader.on('data', function() {\n  while (reader.bytesAhead() >= 9) {\n    var record = {\n      version : reader.uint8(),\n      id      : reader.uint32(),\n      name    : reader.ascii(4),\n    };\n  }\n});\n```\n\nFuture version may also support a declarative syntax for defining structs and\ntheir sequences.\n\n## Reader API\n\n### reader = createReader([buffer] | [options])\n\nCreates a reader with an optional buffer or options hash.\nWhen using the options hash, you can still supply a buffer with key `buffer`.\n\n#### options\n\n* `buffer` start with the supplied buffer\n* `offset` start reading at the specified offset of the buffer\n* `compact` if true, the internal buffer will be garbage collected on\n  every write operation. See also: method compact()\n\n\n### reader.write(buffer)\n\nAppends the given `buffer` to the internal buffer. Whenever possible, existing\nspace inside the internal buffer will be reused, otherwise a new / bigger buffer\nwill be created.\n\n### reader.bytesAhead()\n\nReturns the number of unread bytes available to the reader.\n\n### reader.bytesBuffered()\n\nReturns the number of bytes that are buffered by the Reader internally.\n\n### reader.int8() / reader.uint8()\n\nReturns the next (un)signed 8 bit integer.\n\n### reader.int16BE() / reader.uint16BE() / reader.int16LE() / reader.uint16LE()\n\nReturns the next (un)signed 16 bit integer in the chosen endianness.\n\n### reader.int32BE() / reader.uint32BE() / reader.int32LE() / reader.uint32LE()\n\nReturns the next (un)signed 32 bit integer in the chosen endianness.\n\n### reader.float32BE() / reader.float32LE()\n\nReturns the next 32 bit float in the chosen endianness.\n\n### reader.double64BE() / reader.double64LE()\n\nReturns the next 64 bit double in the chosen endianness.\n\n### reader.ascii([bytes]) / reader.utf8([bytes])\n\nReturns the next `bytes` as a string of the chosen encoding. If `bytes` is\nomitted, a null terminated string is assumed.\n\n### reader.buffer([bytes])\n\nReturns the next `bytes` as a buffer.\n\n### reader.skip(bytes)\n\nSkips `bytes` bytes of the buffer.\n\n### reader.compact()\n\nForce a compaction of the internal buffer to the minimum size needed,\ndiscarding data already read.\n\n\n## Writer API\n\nThe Writer has not been implemented yet.\n\n## Error Handling\n\nThe reader will throw an exception whenever an operation exceeds the boundary\nof the internal buffer.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/felixge/node-buffy.git"
  },
  "scripts": {
    "test": "make test"
  },
  "version": "0.0.5"
}
